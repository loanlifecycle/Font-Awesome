# circle.yml -- Font-Awesome

machine:
  environment:
    DEPLOY_TOOLKIT: $HOME/deploy_toolkit
    # Locations of log files
    FAILURE_FILE: /tmp/build_failures.txt
    DEPENDENCY_LOG:  $CIRCLE_ARTIFACTS/dependency.log
    TESTING_LOG:  $CIRCLE_ARTIFACTS/testing.log
    LOG_LEVEL: DEBUG
    # Used ONLY for experimental branches of deploy_toolkit
    # Do NOT change this ENV VAR manually!!!!
    DEPLOY_TOOLKIT_BRANCH: <DEPLOY_TOOLKIT_BRANCH>
    # ENV Vars required to compile components
    src: ./src
    tmp: /tmp
    components: $CIRCLE_ARTIFACTS/components
    pattern_fonts: "\/\* import fonts \*\/"
    pattern_url: "url\(['\"](\.\.\/?)*((\/[[:alnum:]_\.\-]+)+)([\?\#]+[[:alnum:]=&\#_\.\-]+)?['\"]\)"
    fa: $HOME/Font-Awesome
    fa_dist: $fa/dist/assets/font-awesome
    fa_styles: $fa_dist/css
    fa_archive: font-awesome.zip
    fa_rsrc: font_awesome.resource
    fa_fonts: font-awesome-font.css
    fa_cmp: Define_Font_Awesome_Fonts.component
    fa_url: "url(\"{\!URLFOR(\$Resource.font_awesome, \'\2\')}\4\")"

dependencies:
  pre:
    # Clone loanlifecycle/deploy_toolkit AND allow for testing of experimental branches
    - |
      if [ "$DEPLOY_TOOLKIT_BRANCH" == "<DEPLOY_TOOLKIT_BRANCH>" ]; then DEPLOY_TOOLKIT_BRANCH="master"; fi
      echo "Checking out branch: $DEPLOY_TOOLKIT_BRANCH\n"
      git clone -b $DEPLOY_TOOLKIT_BRANCH git@github.com:loanlifecycle/deploy_toolkit.git $DEPLOY_TOOLKIT
    # Install gem bundler
    - gem install bundler --pre
    # Update npm binary itself (avoids red warning messages)
    - npm install -g npm
    - sudo apt-get install --assume-yes --force-yes ruby-dev nodejs npm build-essential
    - sudo npm install -g grunt grunt-cli less less-plugin-clean-css
  override:
    - bundle install || ( touch $FAILURE_FILE && exit 1 )
    # Install deploy_toolkit python dependencies
    - $DEPLOY_TOOLKIT/scripts/installation/install_dependencies_for_python.sh || ( touch $FAILURE_FILE && exit 1 )
    # Install deploy_toolkit locally AND install SF Ant binary
    - cd $DEPLOY_TOOLKIT && npm install -g || ( touch $FAILURE_FILE && exit 1 )
    # Report local build information to screen
    - sfdeploy --deployment-type report_build_info -lt off || ( touch $FAILURE_FILE && exit 1 )
    # Run npm install on the local repo
    - sfdeploy --deployment-type npm_install --log-type file --log-level $LOG_LEVEL --log-path $DEPENDENCY_LOG --source src/ -ci || ( touch $FAILURE_FILE && exit 1 )\

test:
  pre:
  override:
    # build Font-Awesome
    - bundle exec jekyll build || ( touch $FAILURE_FILE && exit 1 )

  post:
    - |
      sed -E "s/$pattern_url/$fa_url/g" "$fa_styles/$fa_fonts" | sed -E "s/&/&amp;/g" > "$tmp/$fa_fonts"
      sed -E "/$pattern_fonts/r $tmp/$fa_fonts" "$components/$fa_cmp" > "$tmp/$fa_cmp"
      sed -E "/$pattern_fonts/d" "$tmp/$fa_cmp" > "$components/$fa_cmp"
    # Copy all the asses to the artifacts directory
    - |
      cp dist/assets/font-awesome/font-awesome.zip $CIRCLE_ARTIFACTS
      mkdir $CIRCLE_ARTIFACTS/Font-Awesome
      cp -r css $CIRCLE_ARTIFACTS/Font-Awesome
      cp -r less $CIRCLE_ARTIFACTS/Font-Awesome
    # Notify all relevant source of the build results.
    - $DEPLOY_TOOLKIT/scripts/build_notifications.py
